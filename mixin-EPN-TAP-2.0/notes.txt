QUESTIONS:
* It feels redundant to mention that a field "Can be alphanumeric" in the column description, eg:
                        <column name="granule_uid" type="text" required="True"
                                ucd="meta.id"
                                description="Internal table row index
                                        Unique ID in data service,
					also in v2. Can be alphanumeric.">
Might be better shortened to just:
                        <column name="granule_uid" type="text" required="True"
                                ucd="meta.id"
                                description="Internal table row index
                                        Unique ID in data service.>




BUGS:
* Parameter access_format should be optional unless access_url is provided. 
	However it appears to be currently mandatory:
	"Parameter access_format is not defaulted in fillepn and thus must be bound."
* Similar issue with spatial_frame_type?

For q.rd maker:
* Non-existing parameters should not be bound.
	


NOTE that epntap2.xml should be renamed to epntap2.rd
(i've named it .xml only so that GitHub highlights it correctly)

this file (epntap2.rd) should probably be placed into 
/usr/share/pyshared/gavo/resources/inputs/__system__/
to make it visible to DaCHS

there is no need to keep epntap2.rd and epntap.rd separate, 
since only <mixinDef id="table"> and <procDef type="apply" id="populate">
need to be changed, and one RD file can have multiple definitions of these
however it may be more convinient to do so at the development stage - 
makes it easier to edit.

I don't understand why does epntap.rd have a column "accref"
<column name="accref" original="//products#products.accref"/>
This exposes my input data table. Is that really necessary? 
Also there is no property accref in specifications for either v1.0 or v2.0. 

Here we have all min/max pairs generated by <STREAM id="_minmax"> 
which is then fed via <FEED>, eg
			<FEED source="_minmax"
				basename="t_sampling_step"
				baseucd="time.interval" unit="s"
				baseutype="Epn.Time.Time_sampling_step"
				basedescr="Sampling time for measurements of dynamical
					phenomena"/>

The defalut values are provided by <mixinPar>, eg
		<mixinPar key="c1unit" description="Unit of the first spatial
			coordinate">deg</mixinPar>
			
I'm confused what does <property key="std">1</property> mean?

New row definitions are taken from this table:
https://voparis-confluence.obspm.fr/display/VES/EPN-TAP+V2.0+parameters

To add control flow to mixin best to use <code> tag...
which can be a child of either <processEarly> or <processLate>
which could be children of <mixinDef>.

<mixinDef> <processEarly code="..."> ... </processEarly> </mixinDef>
grants access to the structure of the mixin as "substrate"
mixin parameters as "mixinPars"
and to parse context as "context"

Using <processEarly> is probably preferable, as this is called on element fixup, rathar than resource fixup.
Consequently makes sense to place this at the end of <mixinDef>

Maybe something like
		<processEarly>
			<code>
			\c3unit='deg'
			</code>
		</processEarly> 
will work...

There is an example of <processLate> in obscore.rd:
		<processLate>
			<doc>
				Find all data items importing the table and furnish them
				with the scripts necessary to update the obscore view.
			</doc>
			<!-- see //products#hackProductsData for why this is a huge pain in
			the neck and how to get out of this. -->
			<code><![CDATA[
				if not substrate.onDisk:
					raise base.StructureError("Only onDisk tables can be obscore"
						" published, but %s is not."%substrate.id)

				rd = base.caches.getRD("//obscore")
				insertScript = rd.getById("addTableToObscoreSources")
				removeScript = rd.getById("removeTableFromObscoreSources")

				for dd in substrate.rd.iterDDs():
					addDependent = False
					for make in dd.makes:
						if make.table is substrate:
							make.scripts.append(insertScript)
							# the remove script needs to have the right parent
							make.feedObject("script", removeScript.copy(make))
							addDependent = True
					if addDependent:
						dd.dependents.append("//obscore#create")
			]]></code>
		</processLate>
	</STREAM>

this is the example refered to from products.rd of <processLate>:
<STREAM id="hackProductsData">
	<doc>
		This defines a processLate proc that hacks data instances
		building tables with products such that the products table
		is fed and the products instance columns are assigned to.
	</doc>
	<!-- This sucks.  We want a mechanism that lets us
		deposit events within the table definition; strutures referring
		to them could then replay them -->
	<processLate>
		<setup>
			<code>
				from gavo import rscdef
			</code>
		</setup>
		<code><![CDATA[
			if not substrate.onDisk:
				raise base.StructureError("Tables mixing in product must be"
					" onDisk, but %s is not"%substrate.id)
				# Now locate all DDs we are referenced in and...
			prodRD = base.caches.getRD("//products")
			for dd in substrate.rd.iterDDs():
				for td in dd:
					if td.id==substrate.id:
						# ...feed instructions to make the row table to it and...
						dd._makes.feedObject(dd, rscdef.Make(dd, 
							table=prodRD.getTableDefById("products"),
							rowmaker=prodRD.getById("productsMaker"),
							role="products"))
							# ...add some rules to ensure prodcut table cleanup,
						# and add mappings for the embedding table.
						for make in dd.makes:
							if make.table.id==substrate.id:
								# it was stupid to hack the host rowmaker from the mixin.
								# I need some exit strategy here.
								# Meanwhile: we're suppressing the hack if it'd fail
								# anyway.
								if "owner" in make.table.columns.nameIndex:
									base.feedTo(make.rowmaker,
										prodRD.getById("prodcolMaps").getEventSource(), context,
										True)

								base.feedTo(make,
									prodRD.getById("hostTableMakerItems").getEventSource(), 
									context, True)
		]]></code>
	</processLate>
</STREAM>
These are the only 2 instances of <processLate> in GAVO source code.

The definitions of <processEarly> and <processLate> are in 
gavo/rscdef/mixins.py
<processEarly> is used once - in ssap.rd to fill UCDs and Units:
gavo/resources/inputs/__system__/ssap.rd

	<mixinDef id="sdm-instance">
		<mixinPar key="spectralUnitOverride" description="Force unit of
			 the spectral column (don't use this)">__EMPTY__</mixinPar>
		<mixinPar key="spectralUCDOverride" description="Force UCD of the
			 spectral column (don't use this)">__EMPTY__</mixinPar>

		<processEarly>
			<setup>
				<code>
					from gavo import base
					from gavo import rscdef
					from gavo.protocols import sdm
				</code>
			</setup>
			<code>
				# copy over columns and params from the instance table as
				# params for us.
				ssapInstance = context.resolveId(mixinPars["ssaTable"])
				for col in ssapInstance.columns:
					atts = col.getAttributes()
					atts["utype"] = sdm.getSDM1UtypeForSSA(atts["utype"])
					atts["required"] = False
					substrate.feedObject("param", 
						base.makeStruct(rscdef.Param, parent_=substrate, **atts))
				for param in ssapInstance.params:
					newUtype = sdm.getSDM1UtypeForSSA(param.utype)
					substrate.feedObject("param", 
						param.change(utype=newUtype))

				specCol = substrate.getColumnByName("spectral")
				specCol.feed("ucd", "\spectralUCDOverride" or
					substrate.getParamByName("ssa_spectralucd").value)
				specCol.feed("unit", "\spectralUnitOverride" or
					substrate.getParamByName("ssa_spectralunit").value)

				fluxCol = substrate.getColumnByName("flux")
				fluxCol.feed("ucd",
					substrate.getParamByName("ssa_fluxucd").value)
				fluxCol.feed("unit",
					substrate.getParamByName("ssa_fluxunit").value)

				# set the SDM container meta if not already present
				if substrate.getMeta("utype", default=None) is None:
					substrate.setMeta("utype", "spec:Spectrum")
			</code>
		</processEarly>
	</mixinDef>


To get value from a mixinPars follow example:
spatialFrameType = context.resolveId(mixinPars["spatialFrameType"])

To see how context.resolveId works, see gavo/base/parsecontext.py

Maybe something like this might work here:

<!---->
<!--NEW CODE STARTS!-->
<!--first declare variables-->
		<mixinPar key="spatialFrameType" description="input variable">myFrame</mixinPar>
		<mixinPar key="c1unit" description="Unit of the first spatial coordinate override">_EMPTY_</mixinPar>
		<mixinPar key="c2unit" description="Unit of the second spatial coordinate override">_EMPTY_</mixinPar>
		<mixinPar key="c3unit" description="Unit of the third spatial coordinate override">_EMPTY_</mixinPar>
<!--on element complet run-->
		<processEarly>
			<setup>
<!--import libraries-->
				<code>
					from gavo import base
					from gavo import rscdef
					from gavo.protocols import sdm
				</code>
			</setup>
<!--run code-->
			<code>
				spatialFrameType = mixinPars["spatialFrameType"]
				#note that mixinPars is actually a dictionary
				#and now based on that input variable we can compute output
				mixinPars["c1unit"] = "myc1unit"+spatialFrameType
				mixinPars["c2unit"] = "myc2unit"+spatialFrameType
				mixinPars["c3unit"] = "myc3unit"+spatialFrameType
			</code>
		</processEarly>
<!--NEW CODE ENDS!-->
<!---->

On the server the correct file to create is located at
/usr/lib/python2.7/dist-packages/gavo/resources/inputs/__system__/epntap2.rd

So it's possible to edit the values of mixinPars, as in

                <processEarly>
                        <setup>
                                <code>
                                        from gavo import base
                                        from gavo import rscdef
                                        from gavo.protocols import sdm
                                        #print mixinPars
                                        print "setup complete"
                                </code>
                        </setup>
                        <code>
                                print "process Early code executing"
                                #print mixinPars
                                #firstUnit = mixinPars["c1unit"]
                                #print firstUnit
                                mixinPars["c3unit"] = u'deg'
                                mixinPars.update()
                                print mixinPars
                                #print context
                                #print dir(substrate)
                                #print dir(context)
                                #print dir(mixinPars)
                        </code>
                </processEarly>

Note, however, that process Early runs after the <events>, and while <mixinPars> are updated, 
this has no effect on the output, since by that time columns are already created!

Somehow the events must be called again, perhaps through substrate or context.

The substrate members are:

['_IVOMetaMixin__getFromDB', '_MacroPackage__findMacro', '_MetaMixin__hasMetaParent', '_RDAttribute__rd', '__class__', '__contains__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__implemented__', '__init__', '__iter__', '__metaclass__', '__module__', '__new__', '__providedBy__', '__provides__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_addMeta', '_adql', '_allProfiles', '_cacheProcessEarly140094857785488', '_cols', '_completeElementNext', '_defineFixupFunction', '_delMeta', '_dupePolicy', '_forceUnique', '_foreignKeys', '_getFromAtom', '_getMeta', '_groups', '_hasAtom', '_id', '_indices', '_iterMeta', '_makeUpwardCaller', '_makeUpwardCallerOneArg', '_metaAttr', '_meta_dateUpdated', '_meta_datetimeUpdated', '_meta_identifier', '_meta_recTimestamp', '_meta_referenceURL', '_meta_sets', '_meta_status', '_mixins', '_namePath', '_nop', '_onDisk', '_onElementCompleteNext', '_original', '_params', '_primary', '_pristine', '_properties', '_rd', '_readProfiles', '_registration', '_resolveSTC', '_setForAtom', '_stcs', '_system', '_temporary', '_validateNext', '_viewStatement', 'addMeta', 'adopt', 'adql', 'allProfiles', 'attrSeq', 'buildRepr', 'callCompletedCallbacks', 'change', 'clearProperty', 'columns', 'completeElement', 'completedCallbacks', 'copy', 'copyMetaFrom', 'deepCopyMeta', 'delMeta', 'disambiguateColumns', 'dupePolicy', 'end_', 'execMacro', 'expand', 'feed', 'feedEvent', 'feedFrom', 'feedObject', 'finishElement', 'fixupFunction', 'forceUnique', 'foreignKeys', 'fromColumns', 'fromStructure', 'getAllMetaPairs', 'getAttribute', 'getAttributes', 'getByName', 'getByUtype', 'getByUtypes', 'getColumnById', 'getColumnByName', 'getColumnByUCD', 'getColumnByUCDs', 'getColumnsByUCD', 'getColumnsByUCDs', 'getCopyableAttributes', 'getDDL', 'getDefaults', 'getElementForName', 'getExpander', 'getFieldIndex', 'getFullId', 'getMeta', 'getMetaKeys', 'getMetaParent', 'getNote', 'getParamByName', 'getPrimaryIn', 'getProductColumns', 'getProperty', 'getQName', 'getSTCDefs', 'getURL', 'groups', 'hasProperty', 'id', 'idmap', 'indices', 'isEmpty', 'iterChildren', 'iterEvents', 'iterMeta', 'keys', 'listMacros', 'macro_RSTservicelink', 'macro_RSTtable', 'macro_colNames', 'macro_curtable', 'macro_decapitalize', 'macro_getConfig', 'macro_getParam', 'macro_internallink', 'macro_magicEmpty', 'macro_metaString', 'macro_nameForUCD', 'macro_nameForUCDs', 'macro_qName', 'macro_quote', 'macro_rdId', 'macro_rdIdDotted', 'macro_schema', 'macro_tablename', 'macro_test', 'macro_today', 'macro_upper', 'macro_urlquote', 'makeRowFromTuple', 'managedAttrs', 'metaModel', 'meta_', 'mixesIn', 'mixin', 'namePath', 'name_', 'onDisk', 'onElementComplete', 'original', 'params', 'parent', 'primary', 'properties', 'qualifiedId', 'rd', 'readProfiles', 'registration', 'resType', 'resolveName', 'setMeta', 'setMetaParent', 'setProperty', 'start_', 'stc', 'system', 'temporary', 'traverse', 'validate', 'validateRow', 'value_', 'viewStatement']

the context members are
['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'addExitFunc', 'doQueries', 'eventSource', 'exitFuncs', 'failuresAreCacheable', 'forRD', 'fromContext', 'getById', 'getQualifiedId', 'idmap', 'pos', 'registerId', 'resolveId', 'restricted', 'runExitFuncs', 'setEventSource', 'srcPath']

Since it is too late to update the MixinPars, the column should be updated instead, 
however, it should be updated using method feed:
#from      /usr/lib/python2.7/dist-packages/gavo/base/structure.py
        def feed(self, name, literal, ctx=None):
                """feeds the literal to the attribute name.

                If you do not have a proper parse context ctx, so there
                may be restrictions on what literals can be fed.
                """
                self.managedAttrs[name].feed(ctx, self, literal)


EXTREMELY IMPORTAINT POI: __system RD are not updated by default.
For the changes to take place a command "gavo serve reload" must be run
prior to running "gavo --debug imp q.rd"
